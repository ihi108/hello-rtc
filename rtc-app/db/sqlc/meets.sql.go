// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: meets.sql

package db

import (
	"context"
	"database/sql"
)

const createMeet = `-- name: CreateMeet :one
INSERT INTO meets (
  id,
  title,
  description,
  recording,
  author
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, title, description, recording, author, created_at, updated_at
`

type CreateMeetParams struct {
	ID          string         `json:"id"`
	Title       sql.NullString `json:"title"`
	Description sql.NullString `json:"description"`
	Recording   sql.NullString `json:"recording"`
	Author      string         `json:"author"`
}

func (q *Queries) CreateMeet(ctx context.Context, arg CreateMeetParams) (Meet, error) {
	row := q.db.QueryRowContext(ctx, createMeet,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Recording,
		arg.Author,
	)
	var i Meet
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Recording,
		&i.Author,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getMeet = `-- name: GetMeet :one
SELECT id, title, description, recording, author, created_at, updated_at FROM meets
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetMeet(ctx context.Context, id string) (Meet, error) {
	row := q.db.QueryRowContext(ctx, getMeet, id)
	var i Meet
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Recording,
		&i.Author,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listMeets = `-- name: ListMeets :many
SELECT id, title, description, recording, author, created_at, updated_at FROM meets
ORDER BY id
`

func (q *Queries) ListMeets(ctx context.Context) ([]Meet, error) {
	rows, err := q.db.QueryContext(ctx, listMeets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Meet{}
	for rows.Next() {
		var i Meet
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Recording,
			&i.Author,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
