// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  username,
  first_name,
  last_name,
  middle_name,
  email,
  hashed_password,
  quote,
  bio,
  date_of_birth,
  avatar,
  banner
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
)
RETURNING id, username, first_name, last_name, middle_name, email, hashed_password, quote, bio, date_of_birth, avatar, banner, profile_complete, password_changed_at, created_at, updated_at
`

type CreateUserParams struct {
	Username       string         `json:"username"`
	FirstName      string         `json:"first_name"`
	LastName       string         `json:"last_name"`
	MiddleName     sql.NullString `json:"middle_name"`
	Email          string         `json:"email"`
	HashedPassword string         `json:"hashed_password"`
	Quote          sql.NullString `json:"quote"`
	Bio            sql.NullString `json:"bio"`
	DateOfBirth    time.Time      `json:"date_of_birth"`
	Avatar         string         `json:"avatar"`
	Banner         sql.NullString `json:"banner"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.FirstName,
		arg.LastName,
		arg.MiddleName,
		arg.Email,
		arg.HashedPassword,
		arg.Quote,
		arg.Bio,
		arg.DateOfBirth,
		arg.Avatar,
		arg.Banner,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.FirstName,
		&i.LastName,
		&i.MiddleName,
		&i.Email,
		&i.HashedPassword,
		&i.Quote,
		&i.Bio,
		&i.DateOfBirth,
		&i.Avatar,
		&i.Banner,
		&i.ProfileComplete,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, username, first_name, last_name, middle_name, email, hashed_password, quote, bio, date_of_birth, avatar, banner, profile_complete, password_changed_at, created_at, updated_at FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.FirstName,
		&i.LastName,
		&i.MiddleName,
		&i.Email,
		&i.HashedPassword,
		&i.Quote,
		&i.Bio,
		&i.DateOfBirth,
		&i.Avatar,
		&i.Banner,
		&i.ProfileComplete,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, first_name, last_name, middle_name, email, hashed_password, quote, bio, date_of_birth, avatar, banner, profile_complete, password_changed_at, created_at, updated_at FROM users
ORDER BY id
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.FirstName,
			&i.LastName,
			&i.MiddleName,
			&i.Email,
			&i.HashedPassword,
			&i.Quote,
			&i.Bio,
			&i.DateOfBirth,
			&i.Avatar,
			&i.Banner,
			&i.ProfileComplete,
			&i.PasswordChangedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
